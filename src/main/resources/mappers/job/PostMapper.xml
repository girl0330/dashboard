<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.job.dashboard.domain.job.PostMapper">
    <insert id="saveJob" parameterType="com.job.dashboard.domain.dto.JobPostDTO">
        INSERT INTO /*PostMapper.saveJob*/
            job_post_info (
                            USER_NO,
                            title,
                            description,
                            job_type_code,
                            zipcode,
                            address,
                            address_detail,
                            longitude,
                            latitude,
                            salary_type_code,
                            salary,
                            job_time,
                            job_day_type_code,
                            manager_number,
                            requirement,
                            number_of_staff,
                            employment_type_code,
                            etc,
                            system_register_id,
                            system_updater_id,
                            status_type_code
        )
        VALUES (
                #{userNo},
                #{title},
                #{description},
                #{jobTypeCode},
                #{zipcode},
                #{address},
                #{addressDetail},
                #{longitude},
                #{latitude},
                #{salaryTypeCode},
                #{salary},
                #{jobTime},
                #{jobDayTypeCode},
                #{managerNumber},
                #{requirement},
                #{numberOfStaff},
                #{employmentTypeCode},
                #{etc},
                #{userNo},
                #{userNo},
                'OPEN'
                )
    </insert>

    <select id="getJobLists" parameterType="map" resultType="com.job.dashboard.domain.dto.JobPostDTO">
        SELECT /*PostMapper.getJobLists*/
            jpi.job_id,
            jpi.USER_NO,
            (SELECT  fi.file_id FROM file_info fi WHERE fi.user_no = jpi.user_no ORDER BY fi.file_id DESC LIMIT 1) AS file_id,
            jpi.title,
            jpi.job_type_code,
            func_get_detail_name('job_type', jpi.job_type_code) AS job_type_code_name,
            jpi.address,
            jpi.salary_type_code,
            func_get_detail_name('salary_type', jpi.salary_type_code) AS salary_type_code_name,
            jpi.salary,
            func_format_time_ago(jpi.system_register_datetime) AS system_register_datetime,
            jpi.job_time,
            jpi.status_type_code,
            func_get_detail_name('status_type', jpi.status_type_code) AS status_type_code_name
        FROM job_post_info jpi
        WHERE jpi.title LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY jpi.system_register_datetime DESC
    </select>

    <select id="getCountJobs" resultType="int">
        SELECT /* PostMapper.getCountJobs */
            COUNT(*) FROM job_post_info
    </select>

    <select id="findLike" parameterType="map" resultType="int">
        SELECT /* PostMapper.findLike */
            COUNT(1) FROM job_like_info
        WHERE user_no = #{userNo} AND job_id = #{jobId}
    </select>

    <delete id="deleteLike" parameterType="map">
        DELETE /* PostMapper.deleteLike */
        FROM job_like_info
        WHERE user_no = #{userNo} AND job_id = #{jobId}
    </delete>

    <insert id="likeUp" parameterType="map">
        INSERT INTO /*PostMapper.likeUp*/
            job_like_info (
                            user_no,
                            job_id,
                            system_register_id,
                            system_register_datetime,
                            system_updater_id,
                            system_update_datetime
        )
        VALUES (
                #{userNo},
                #{jobId},
                #{userNo},
                now(),
                #{userNo},
                now()
                )
    </insert>

    <select id="getJobDetail" resultType="com.job.dashboard.domain.dto.JobPostDTO" parameterType="int">
        SELECT /*PostMapper.getJobDetail*/
            jpi.job_id,
            jpi.USER_NO,
            (SELECT fi.file_id FROM file_info fi WHERE fi.user_no = jpi.user_no ORDER BY fi.file_id DESC LIMIT 1) as file_id,
            jpi.title,
            jpi.description,
            jpi.job_type_code,
            func_get_detail_name('job_type', jpi.job_type_code)  AS job_type_code_name,
            jpi.zipcode,
            jpi.address,
            jpi.address_detail,
            jpi.longitude,
            jpi.latitude,
            jpi.salary_type_code,
            func_get_detail_name('salary_type',  jpi.salary_type_code)  AS salary_type_code_name,
            jpi.salary,
            jpi.job_time,
            jpi.job_day_type_code,
            func_get_detail_name('job_day_type', jpi.job_day_type_code) AS job_day_type_code_name,
            jpi.manager_number,
            jpi.requirement,
            jpi.number_of_staff,
            jpi.employment_type_code,
            func_get_detail_name('employment_type', jpi.employment_type_code) AS employment_type_code_name,
            jpi.etc,
            jpi.status_type_code,
            func_get_detail_name('status_type', jpi.status_type_code) AS status_type_code_name,
            jpi.system_register_id,
            func_format_time_ago(jpi.system_register_datetime) AS system_register_datetime,
            jpi.system_updater_id,
            ci.company_name,
            ci.office_phone,
            ui.email
        FROM job_post_info jpi
            INNER JOIN company_info ci ON jpi.user_no = ci.user_no
            INNER JOIN user_info ui ON jpi.user_no = ui.user_no
        WHERE jpi.job_id = #{jobId}
    </select>

    <update id="updateJob" parameterType="com.job.dashboard.domain.dto.JobPostDTO">
        UPDATE /*PostMapper.updateJob*/
            job_post_info
        SET
            USER_NO = #{userNo},
            title = #{title},
            description = #{description},
            job_type_code = #{jobTypeCode},
            zipcode = #{zipcode},
            address = #{address},
            address_detail = #{addressDetail},
            longitude = #{longitude},
            latitude = #{latitude},
            salary_type_code = #{salaryTypeCode},
            salary = #{salary},
            job_time = #{jobTime},
            job_day_type_code = #{jobDayTypeCode},
            manager_number = #{managerNumber},
            requirement = #{requirement},
            number_of_staff = #{numberOfStaff},
            employment_type_code = #{employmentTypeCode},
            status_type_code = #{statusTypeCode},
            etc = #{etc},
            system_updater_id = #{systemUpdaterId}
        WHERE
            job_id = #{jobId}
    </update>

    <select id="getWriteUserNo" resultType="int" parameterType="int">
        SELECT /*PostMapper.getWriteUserNo*/
            USER_NO
        FROM job_post_info
        WHERE job_id = #{jobId}
    </select>

    <delete id="delete" parameterType="int">
        DELETE /*PostMapper.delete*/
        FROM job_post_info
        WHERE job_id = #{jobId}
    </delete>

    <select id="profileCheck" parameterType="com.job.dashboard.domain.dto.UserProfileInfoDTO" resultType="int">
        SELECT /*PostMapper.profileCheck*/
            profile_id
        FROM USER_PROFILE_INFO
        WHERE USER_NO = #{userNo}
    </select>

    <select id="profileCount" parameterType="int" resultType="int">
        SELECT  /*PostMapper.profileCount*/
            count(1)
        FROM company_info
        WHERE USER_NO = #{userNo}
    </select>

    <select id="applyCheck" parameterType="int" resultType="int">
        SELECT  /*PostMapper.applyCheck*/
            count(1)
        FROM job_application_info
        WHERE USER_NO = #{userNo}
        AND job_id = #{jobId}
    </select>

    <insert id="insertJobApplicationInfo" parameterType="com.job.dashboard.domain.dto.JobApplicationDTO">
        INSERT INTO /*PostMapper.insertJobApplicationInfo*/
            job_application_info(
                                job_id,
                                USER_NO,
                                status_type_code,
                                motivation_description,
                                system_register_id,
                                system_updater_id
        ) VALUES (
                    #{jobId},
                    #{userNo},
                    #{statusTypeCode},
                    #{motivationDescription},
                    #{userNo},
                    #{userNo}
                    )
    </insert>

    <delete id="deleteJobApplicationInfo" parameterType="com.job.dashboard.domain.dto.JobApplicationDTO">
        DELETE   /* PostMapper.deleteJobApplicationInfo */
        FROM job_application_info
        WHERE job_id = #{jobId} AND USER_NO = #{userNo}
    </delete>

    <select id="profileExistCheck" parameterType="int" resultType="int">
        SELECT /* PostMapper.profileExistCheck */ count(profile_id) AS countProfile
        FROM user_profile_info
        WHERE USER_NO = #{userNo}
    </select>

    <select id="applicationUserChe" resultType="int" parameterType="int">
        SELECT /* PostMapper.applicationUserChe */ count(user_no) AS countUserApplication
        FROM job_application_info
        WHERE USER_NO = #{userNo}
    </select>

    <select id="getLikeList" parameterType="int" resultType="com.job.dashboard.domain.dto.LikeDTO">
        SELECT /* PostMapper.getLikeList */
        like_id,
        user_no,
        job_id
        FROM job_like_info
        WHERE user_no = #{userNo}
    </select>
</mapper>